docker info

service dockr status

service docker start  or systemctl start docker     //Redirecting to /bin/systemctl start docker.service
docker version

docker ps -a  ===all running container

docker --help  it shows the all module in docker
docker ps ==old way
docker container ps   ==container is module in docker and ls is child module
docker image ls    ==same as above
docker network ls

docker container run ubuntu    cat /etc/os-release   :-it is creating a container and running a container within container
docker container ls -a   ==it will show exit status container along with command
docker container run sleep 30 ==after 30 seconds container will exit
docker container rm "containerid"   it will remove the container.it is not mandatory that take whole name of container you can starting 2 or 4 digit
docker container rm "containerid" "containerid"    remove two container
docker container start "containerid"
docker container stop "containerid"
docker container run -d ubuntu sleep 30    ==running container in background -d =detached
docker container run -d  -it ubuntu /bin/bash    ==running container in interactive mode and will exit
docker container run   -it ubuntu /bin/bash   ==running container in interactive mode and will not exit
ctrl+pq :-it will not exit container.you will be outside of container.

docker container ls -aq    =it will show id of the all container
docker container rm $(docker container ls -aq)
docker container inspect "containerid"
docker container logs "containerid"
docker container top "containerid"   -to see the all process running in the container

ps -aux   :-show the all process running in the container
docker container stats  -it will show all memory usage etc.
ifconfig   --it will show the systemip
docker container run -d -p 3600:80 --name test nginx    ==port forwarding.It means whatever request you are getting on system ip(192.168.146.238) and port 3600
you will be redirected to nginx ip and port .http://192.168.146.238:3600/ --here system ip and port
netstat -nltp       ==it will show the ip address and port
docker container exec -it "containerid" /bin/bash      :-exec command will run last command within container

docker container rename 9e522e7b821f tiger     ==it will rename the container name.
docker container restart "containerid"
docker container attach "containerid"   :-it will push container in foreground and it will print the logs when you will try to access.
docker container run -itd 99bc /bin/bash   :-running container in background
docker container kill "contanerid"
docker container wait               ==it will wait that container will stop and will return 0
docker container stop "containerid"
docker container pause "f600489c69da"
docker container unpause "containerid"
docker container prune -f  ==-f cause not to show confirmation window
docker container port "containername"
docker container create nginx  sleep 30   :-diff. between run and create .run=create+run
docker container diff "containerid"    it will show the changed file
docker container cp "sourcedir" "containerid:/dirname/"  ==you can copy the file in container
docker container export "containerid" >ubuntu.tar  :-exporting containefrdocker
 docker image import ubuntu.tar  my_ubuntu
 docker container run -it my_ubuntu /bin/bash
 docker container commit --author "ghanshyam shukla" -m "this is the test commit" c230ce951a43  my_test_image    ==this command is used to commit the created in container
 docker container run -i -t my_test_image /bin/bash   :-then run the image as container and you will find created file

 docker image tag  "image_name" hub.docker.com/gshukla123/"image_name"  :-it will tag the image
 docker    push gshukla123/"image_name"
docker image ls --format '{{.ID}} , {{.Repository}}'    :=it will display all image along with id and repository https://docs.docker.com/config/formatting/
docker image history nginx  :-it will show the image history
docker images rm image1,image2    :--will remove the image
docker image rm -f image   :- it will remove forcefully
docker image inspect "imagename"
docker image save publish-docker-image-to-docker-hub >savedemo.tar  :-it will save layer by layer.
docker image load <savedemo.tar
docker container save   :-there is no layer and volume mounts
docker image import
[iid@iid dockerfile]$ docker image build -t myubuntudemo:1 .    :-creating the image
[iid@iid dockerfile]$ docker image ls -a|wc                    shows the number of line in docker file

cat -n Dockerfile   ==will show number of line in docker file
https://www.baeldung.com/ops/multiple-dockerfiles

docker image inspect "imagename"   :-to see the image content

env   :-to see the environment variable run container and run env command

Difference between copy and add command

docker image build -t myimg:1 .   :-this build the image
[iid@iid dockersh]$ docker container  run -P -itd  myimg:1      here -P means it will assign a port to container

#do ssh iid@172.17.0.7  and pres enter and provide password pass123
# 192.168.146.241  =this is machine ip
#[iid@iid dockersh]$ ssh  iid@192.168.146.241 -p  32768   :-this  iid is user and 192.168.146.241 machine ip and 32768 is the exposed port
#[iid@iid dockersh]$ ssh  iid2@192.168.146.241 -p  32768   :-this  iid is user which is above  and 192.168.146.241 machine ip and 32768 is the exposed port

Persisting data in the docker
1-Using Volume
2-Using bind mount


tmpfs mount

docker volume ls
[iid@iid entrypoint]$ docker container  run --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql
/var/lib/mysql

[iid@iid dockervolume]$ docker  inspect "imageid"
[iid@iid dockervolume]$ docker volume inspect "volumeid"
[iid@iid dockervolume]$ docker container exec -it 0092b6ce7b22 bash
[iid@iid dockervolume]$ docker container run --name mysqlll -itd -v 138351eb56be4079ae1599f36e186e31eb06e834290fbea507f604b839db580e:/var/lib/mysql mysql
the above command attached the existing volume  to new container.and in this way you can persist the data created in the previous container
[iid@iid dockervolume]$ docker container run -d  --name mysqltest -v demo_volume:/var/lib/mysql -e MYSQL_ALLOW_EMPTY_PASSWORD mysql
running container with volume

bind mount

[iid@iid dockervolume]$ docker container run  -it -v /home/iid/shareddocker:/tmp/test/ ubuntu:14.04

the above command map the host machine folder into the container and always provide the full path

[iid@iid dockervolume]$ docker container run  -it -v $(pwd):/tmp/test/ ubuntu:14.04  :-it will what pwd command will return
[iid@iid dockervolume]$  docker container run  -it --mount type=bind,source=/home/iid/shareddocker,target=/tmp/test/ ubuntu:14.04 bash
the above command also create the binding of folder of host with container

====docker networking ======================
[iid@iid dockervolume]$ docker network ls
[iid@iid dockervolume]$ docker network inspect bridge
[iid@iid dockervolume]$  docker container run  -itd  --name mying  nginx:latest
[iid@iid dockervolume]$  docker container run  -itd  --name myubuntu  ubuntu:14.04 bash
[iid@iid dockervolume]$ docker network create -d bridge test
[iid@iid dockervolume]$ docker container run -it --name hellonetwork1 --network test nginx:latest  bash
root@f3a87f53e7cd:/# wget 192.168.146.242:32768
 :-- install the wget first  here i had access the container from another network.I have to network one is default and another one test
.I had deployed the nginx in test network and ubuntu in default network .Now i had open the port of ingnx and had access in ubuntu using the machine ip of
the host:port .32768 is the port of ingnx in test network and 192.168.146.242 is ip of the host machine.To create scenario you create 2 container in test network and
one container in default.try to ping container which is in test network.

note :-if you are creating a network then DNS automatically would be enable.but the network provided by the docker you would not find dns enable.
but if you want that if you create a container and DNS would be enable by default.Delete the docker network and create same network with driver bridge
and name with bridge.in this way all containe get enabled dns.
host(network} ----eth0 ---docker0-----dockercontainer


how to ping by hostname in a container.

====host networking =====================================
here if you are giving network=host while creating container the this is not isolated.it will use host network.so do not requre to map the port etxc
but other process would be isolated.

===========creating container which does not assign to any network======================
[iid@iid entrypoint]$ docker container run -it  --name nonenetwork1 --network=none  ubuntu:14.04 bash

===attaching two network with a container=======
[iid@iid entrypoint]$ docker container run -it  --name nonenetwork2 --network=bridge  ubuntu:14.04 bash
[iid@iid java-kubernetes-docker-practice-demo]$ docker network connect test 68007f9367de
[iid@iid java-kubernetes-docker-practice-demo]$ docker network disconnect test 68007f9367de

docker network rm test   :-removing network
docker network prune  :-removing network

=====================docker registry=============================
[iid@iid java-kubernetes-docker-practice-demo]$ docker run -d -p 5000:5000 --name registry registry:latest
http://localhost:5000/v2/_catalog
[iid@iid java-kubernetes-docker-practice-demo]$ docker image tag mysql:latest 127.0.0.1:5000/mysql:latest
[iid@iid java-kubernetes-docker-practice-demo]$ docker image push 127.0.0.1:5000/mysql:latest
docker image pull  127.0.0.0:5000/nginx:latest   ==it pull download from the local repository

======================configuring insecure registry =========================
create file daemon.json
{
"insecure-registries" : [ipaddress:portnumber of registry]
}
and move the file in the below location
/etc/docker/

===========================setting up docker registry ====================
[iid@iid java-kubernetes-docker-practice-demo]$ docker container stop 1eb6c7e49bf3    ==stop the local registry
>>openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -x509 -days 365 -out certs/domain.cert
press enter
for all occurance but fill
your name or your server name :-  repo.docker.local  :-it can be any name

make folder in /etc/docker/
mkdir certs.d
cd certs.d
mkdir docker.rep.local:5000

cp certs/domain.cert /etc/docker/certs.d/repo.docker.local\:5000/ca.cert
service docker restart

docker container run -d -p 5000:5000 --name secure_registry -v $(pwd)/certs/:/certs/ -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e  REGISTRY_HTTP_TLS_KEY
=/certs/domain.key  registry
here we are mounting the certificate along with environment in containers :/certs  directory
now try to push in repository
docker image tag nginx repo.docker.local:5000/nginx
docker image push  repo.docker.local:5000/nginx
make the entry in /etc/hosts

192.168.146.242   docker.repo.local      :-ip address of the registry host. in this case given ip is the hosts,machine  ip




then you will find two nic interface attached to container if you run the ipconfig






